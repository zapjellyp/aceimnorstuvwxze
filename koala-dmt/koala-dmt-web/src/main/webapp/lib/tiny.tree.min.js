+(function($) {
	var Tree = function(element, options) {
		this.$element = $(element);
		this.selectItemMaps = {};
		this.options = options;
		this.render();
		this.$element.on('click', '.tree-item', $.proxy(function(f) {
			this.selectItem(f.currentTarget);
		}, this));
		this.$element.on('click', '.tree-folder-header', $.proxy(function(f) {
			this.selectFolder(f.currentTarget);
		}, this));
		this.$element.on('checkParent', '.tree-folder-header', $.proxy(function(f, chekced) {
			this.checkParent(f.currentTarget, chekced);
		}, this));
		this.$element.trigger('complate');
	};
	Tree.DEFAULTS = {
		'open-icon' : 'fa-plus fa',
		'close-icon' : 'fa-minus fa',
		selectable : false
	};
	Tree.prototype = {
		constructor : Tree,
		render : function() {
			this.populate(this.options.localData, this.$element);
		},
		populate : function(data, $element) {
			var self = this;
			$.each(data, function() {
				var i;
				if (this.type === 'folder') {
					i = self.createParent(this);
					//self.$element.find(".tree-folder:eq(0)").clone().show();
					i.find('.tree-folder-name').html(this.name);
					//i.find(".tree-loader").html(self.options.loadingHTML);
					var k = i.find('.tree-folder-header');
					k.data(this);
					if ('icon-class' in this) {
						k.find('[class*="fa-"]').addClass(this["icon-class"]);
					}
					self.populate(this.children, i.find('.tree-folder-content'));
				} else {
					if (this.type === 'item') {
						i = self.createChild(this);
						i.find('.tree-item-name').html(this.name);
						i.data(this);
						if ('selected' in this && this['selected'] == true) {
							i.addClass('tree-selected');
							i.find('i').removeClass(self.options['unselected-icon']).addClass(self.options['selected-icon']);
						}
					}
				}
				if ($element.hasClass('tree-folder-header')) {
					$element.parent().find('.tree-folder-content:eq(0)').append(i);
				} else {
					$element.append(i);
				}
			});
		},
		createParent : function(data) {
			var parent = $('<div class = "tree-folder" style="display:none;"></div>');
			var html = [
				'<div class="tree-folder-header" id="'+data.id+'">', 
				!this.options['close-icon'] ? '': '<i class="' + this.options['close-icon'] + '"></i>', 
				'<div class="tree-folder-name"></div>', 
				'</div>', 
				'<div class = "tree-folder-content" style="display:none"></div>', 
				'<div class="tree-loader" style="display:none"></div>'
			];
			return parent.html(html.join('')).show();
		},
		createChild: function(data){
			var child = $('<div class="tree-item" id="'+data.id+'" style="display:none;"></div>');
			var html = [
				!this.options['unselected-icon'] ? '':'<i class="' + this.options['unselected-icon'] + '"></i>',
				'<div class="tree-item-name"></div>'
			];
			return child.html(html.join('')).show();
		},
		checkParent: function(element, checked){
			var self = this;
			var $element = $(element);
			var data = $element.data();
			if(checked){
				if(self.selectItemMaps[data.id]){
					return;
				}else{
					self.selectItemMaps[data.id] = data;
				}
				
			}else{
				if($element.find('.tree-selected').length == 0){
					delete self.selectItemMaps[data.id];
					$element.parent().parent().find('>.tree-folder-header').trigger('checkParent', checked);
				}
			}
		},
		selectItem : function(element) {
			var self = this;
			if (this.options.selectable == false) {
				return
			}
			var d = $(element);
			var data = d.data();
			var g = self.$element.find('.tree-selected');
			if (this.options.multiSelect) {
				self.selectItemMaps[data.id] = data;
			} else {
				if (g[0] !== d[0]) {
					g.removeClass('tree-selected').find('i').removeClass(this.options['selected-icon']).addClass(this.options['unselected-icon']);
					self.selectItemMaps[data.id] = data;
				}
			}
			if (d.hasClass('tree-selected')) {
				d.removeClass('tree-selected');
				d.find('i').removeClass(this.options['selected-icon']).addClass(this.options['unselected-icon']);
				delete self.selectItemMaps[data.id];
			} else {
				d.addClass('tree-selected');
				d.find('i').removeClass(this.options['unselected-icon']).addClass(this.options['selected-icon']);
				if (this.options.multiSelect) {
					self.selectItemMaps[data.id] = data;
				}
			}
			d.closest('.tree-folder').find('.tree-folder-header').trigger('checkParent', d.hasClass('tree-selected'));
			this.$element.trigger('selected', data);
		},
		selectFolder : function(element) {
			var $element = $(element);
			var folder = $element.parent();
			var data = $element.data();
			var closeIcon = this.options['close-icon'].split(' ')[0];
			var openIcon = this.options['open-icon'].split(' ')[0];
			if ($element.find('.' + closeIcon).length) {
				folder.find('.tree-folder-content:eq(0)').show();
				$element.find('.' + closeIcon + ':eq(0)').removeClass(closeIcon).addClass(openIcon);
				this.$element.trigger('opened', $element.data());
			} else {
				folder.find('.tree-folder-content:eq(0)').hide();
				$element.find('.' + openIcon + ':eq(0)').removeClass(openIcon).addClass(closeIcon);
				this.$element.trigger('closed', $element.data());
			}
		},
		selectedItems : function() {
			var items = [];
			for(id in this.selectItemMaps){
				items.push(this.selectItemMaps[id]);
			}
			return items;
		}
	};
	var old = $.fn.tree;
	$.fn.getTree = function(){
		return $(this).data('tree');
	};
	$.fn.tree = function(option) {
	  	return this.each(function () {
		      var $this   = $(this);
		      var data    = $this.data('tree');
		      var options = $.extend({}, Tree.DEFAULTS, $this.data(), typeof option == 'object' && option);
		      if (!data) $this.data('tree', (data = new Tree(this, options)));
		      if (typeof options == 'string') data[option]();
	    });
	};
	 $.fn.tree.Constructor = Tree;
	
	  // AFFIX NO CONFLICT
	  // =================
	
	  $.fn.tree.noConflict = function () {
	    $.fn.tree = old;
	    return this;
	  };
})(window.jQuery);
